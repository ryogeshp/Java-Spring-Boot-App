pipeline {
  agent {
    docker {
      image 'ryogeshp/yogeshp_mvn_java_docker:v1.0'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/ryogeshp/r.yogesh_p.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.85.240.176:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ryogeshp/jenkins-hero:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "r.yogesh_p"
        GIT_USER_NAME = "ryogeshp"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            sh """
              echo "******** GIT PUSH DEPLOYMENT VERSION ********"
              REPO_DIR="${env.WORKSPACE}/${GIT_REPO_NAME}"
              FILE_PATH="\${REPO_DIR}/Java-mvn-sonar-argo-k8s/java-spring-boot-app-manifests/deployment.yml"

              # Clone repository if not already present
              if [ ! -d "\${REPO_DIR}/.git" ]; then
                rm -rf "\${REPO_DIR}"
                git clone https://\$GITHUB_TOKEN@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git "\${REPO_DIR}"
              fi

              cd "\${REPO_DIR}"
              echo "Listing repository structure for debugging:"
              ls -R

              git config user.email "mujahed.trainer@gmail.com"
              git config user.name "mujahed85"

              echo "File path: \${FILE_PATH}"
              if [ -f "\${FILE_PATH}" ]; then 
                echo "File exists"; 
              else 
                echo "File does not exist"; 
                exit 1; 
              fi

              # Pull latest changes from remote
              git fetch origin
              git pull --rebase origin main || (git rebase --abort && git pull --no-rebase origin main)

              # Update image tag in deployment file
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" "\${FILE_PATH}"

              git status
              git add "\${FILE_PATH}"
              git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
              git push https://\$GITHUB_TOKEN@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
            """
          }
        }
      }
    }
  }
}

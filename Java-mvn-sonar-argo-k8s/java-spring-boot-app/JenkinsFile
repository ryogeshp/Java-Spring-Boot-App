pipeline {
    agent {
        docker {
            image 'ryogeshp/yogeshp_mvn_java_docker:v1.0'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ryogeshp/r.yogesh_p.git'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && mvn clean package'
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "ryogeshp/jenkins-hero:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "r.yogesh_p"
                GIT_USER_NAME = "ryogeshp"
                MANIFEST_FILE = "Java-mvn-sonar-argo-k8s/java-spring-boot-app-manifests/deployment.yml"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''#!/bin/bash
                        # Remove existing repo directory if it exists
                        rm -rf repo

                        # Clone the repository
                        git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git repo
                        cd repo

                        # Configure Git
                        git config user.email "rjprajapati08@gmail.com"
                        git config user.name "ryogeshp"

                        # Update the image tag
                        sed -i "s|image:  ryogeshp/jenkins-hero:replaceImageTag|image: ${DOCKER_IMAGE}|g" "${MANIFEST_FILE}"

                        # Stage changes
                        git add "${MANIFEST_FILE}"

                        # Commit changes (allow empty commit to proceed if no change)
                        git commit -m "Update deployment image to ${DOCKER_IMAGE}" || true

                        # Pull to sync with remote, then push
                        git pull origin main
                        git push origin main
                    '''
                }
            }
        }
    }
}

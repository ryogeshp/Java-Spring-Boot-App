pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github-token')  // Use Jenkins credentials
        GIT_USER_NAME = 'ryogeshp'
        GIT_REPO_NAME = 'r.yogesh_p'
        IMAGE_NAME = 'ryogeshp/yogeshp_mvn_java_docker'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
    }

    stages {

        stage('Checkout') {
            steps {
                script {
                    echo "Cleaning workspace..."
                    sh 'rm -rf Java-mvn-sonar-argo-k8s || true'
                    
                    echo "Cloning repository..."
                    sh '''
                        git clone https://github.com/ryogeshp/r.yogesh_p.git Java-mvn-sonar-argo-k8s
                        cd Java-mvn-sonar-argo-k8s
                        git checkout main
                        git pull origin main
                    '''
                }
            }
        }

        stage('Debug Repository') {
            steps {
                script {
                    sh '''
                        echo "Checking workspace contents..."
                        ls -la
                        echo "Checking Java-mvn-sonar-argo-k8s contents..."
                        ls -la Java-mvn-sonar-argo-k8s
                        echo "Checking if .git exists..."
                        if [ -d Java-mvn-sonar-argo-k8s/.git ]; then
                            echo "Git repository is valid."
                        else
                            echo "ERROR: .git directory missing!"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    echo "Building and testing the project..."
                    sh '''
                        cd Java-mvn-sonar-argo-k8s
                        mvn clean test
                    '''
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    echo "Running SonarQube analysis..."
                    sh '''
                        cd Java-mvn-sonar-argo-k8s
                        mvn sonar:sonar -Dsonar.host.url=http://your-sonarqube-server
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    sh '''
                        docker build -t $IMAGE_NAME:$BUILD_NUMBER Java-mvn-sonar-argo-k8s
                        docker tag $IMAGE_NAME:$BUILD_NUMBER $IMAGE_NAME:latest
                        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
                        docker push $IMAGE_NAME:$BUILD_NUMBER
                        docker push $IMAGE_NAME:latest
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                script {
                    echo "Updating Kubernetes deployment manifest..."
                    sh '''
                        cd Java-mvn-sonar-argo-k8s
                        git config user.email "rjprajapati08@gmail.com"
                        git config user.name "ryogeshp"

                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-spring-boot-app-manifests/deployment.yml
                        git add java-spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"

                        echo "Checking Git repository status..."
                        git status
                        git push https://$GITHUB_TOKEN@github.com/$GIT_USER_NAME/$GIT_REPO_NAME.git HEAD:main
                    '''
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline executed successfully"
        }
        failure {
            echo "Pipeline failed. Check logs for errors."
        }
    }
}

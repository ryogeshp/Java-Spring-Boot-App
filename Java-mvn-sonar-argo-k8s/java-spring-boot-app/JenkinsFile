pipeline {
  agent {
    docker {
      image 'ryogeshp/yogeshp_mvn_java_docker:v1.0'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        // Print a simple message then check out the repository.
        sh 'echo "Checkout stage passed"'
        git branch: 'main', url: 'https://github.com/ryogeshp/r.yogesh_p.git'
      }
    }
    stage('Build and Test') {
      steps {
        // List files to confirm workspace structure
        sh 'ls -ltr'
        // Build the project and create a JAR file
        sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.221.10.162:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          // Run SonarQube analysis
          sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ryogeshp/jenkins-hero:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          // Build the Docker image using the Dockerfile in the project directory.
          sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          // Push the Docker image to Docker Hub (or your registry if you update the URL).
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
              dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "r.yogesh_p"
        GIT_USER_NAME = "ryogeshp"
        // Repository URL to clone; note the .git extension
        REPO_URL = "https://github.com/ryogeshp/r.yogesh_p.git"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            set -x
            # Remove any previous temporary repo clone
            rm -rf /tmp/temp_repo 2>/dev/null
            
            # Clone the repository into /tmp/temp_repo
            git clone "$REPO_URL" /tmp/temp_repo

            # Navigate to the repository directory
            cd /tmp/temp_repo

            # Update the Kubernetes deployment manifest with the current BUILD_NUMBER
            sed -i "s|ryogeshp/jenkins-hero:replaceImageTag|ryogeshp/jenkins-hero:${BUILD_NUMBER}|g" Java-mvn-sonar-argo-k8s/java-spring-boot-app-manifests/deployment.yml

            # Stage and commit the changes. If there are no changes, continue without error.
            git add Java-mvn-sonar-argo-k8s/java-spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"

            # Configure Git user information
            git config user.email "rjprajapati08@gmail.com"
            git config user.name "ryogeshp"
            
            # Mark the repo as safe for Git (useful for newer Git versions)
            git config --global --add safe.directory /tmp/temp_repo

            # Update remote URL to ensure correct repository is used
            git remote set-url origin "$REPO_URL"

            # Push the changes using the GitHub token for authentication
            git push https://$GITHUB_TOKEN@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main

            # Clean up the temporary clone
            rm -rf /tmp/temp_repo
          '''
        }
      }
    }
  }
}

pipeline {
    agent {
        docker {
            image 'ryogeshp/yogeshp_mvn_java_docker:v1.0'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        SONAR_URL = "http://54.85.94.247:9000"
        DOCKER_IMAGE = "ryogeshp/jenkins-hero:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        GIT_REPO_NAME = "r.yogesh_p"
        GIT_USER_NAME = "ryogeshp"
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'rm -rf Java-mvn-sonar-argo-k8s || true' // Clean workspace
                git branch: 'main', url: 'https://github.com/ryogeshp/r.yogesh_p.git'
                sh 'ls -la && git rev-parse --is-inside-work-tree' // Debugging
            }
        }

        stage('Build and Test') {
            steps {
                sh '''
                    cd Java-mvn-sonar-argo-k8s/java-spring-boot-app
                    mvn clean package
                '''
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd Java-mvn-sonar-argo-k8s/java-spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh '''
                        cd Java-mvn-sonar-argo-k8s/java-spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        echo "Checking if repository is valid..."
                        if [ ! -d Java-mvn-sonar-argo-k8s ]; then
                            echo "ERROR: Repository folder not found!"
                            exit 1
                        fi
                        cd Java-mvn-sonar-argo-k8s
                        if [ ! -d .git ]; then
                            echo "ERROR: Not a Git repository!"
                            exit 1
                        fi
                        git config user.email "rjprajapati08@gmail.com"
                        git config user.name "ryogeshp"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-spring-boot-app-manifests/deployment.yml
                        git add java-spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://$GITHUB_TOKEN@github.com/$GIT_USER_NAME/$GIT_REPO_NAME.git HEAD:main
                    '''
                }
            }
        }
    }
}

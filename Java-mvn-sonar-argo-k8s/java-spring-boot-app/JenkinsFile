pipeline {
    agent {
        docker {
            image 'ryogeshp/yogeshp_mvn_java_docker:v1.0'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ryogeshp/r.yogesh_p.git'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.85.240.176:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "ryogeshp/jenkins-hero:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd Java-mvn-sonar-argo-k8s/java-spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "r.yogesh_p"
                GIT_USER_NAME = "ryogeshp"
                MANIFEST_FILE = "Java-mvn-sonar-argo-k8s/java-spring-boot-app-manifests/deployment.yml"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''#!/bin/bash
                        set -x
                        echo "Starting Git check..."
                        command -v git &> /dev/null || { echo "Error: Git is not installed."; exit 1; }
                        echo "Git is installed at: $(command -v git)"

                        git rev-parse --is-inside-work-tree &> /dev/null || { echo "Error: Not a Git repository."; exit 1; }
                        echo "Working in a Git repository"

                        git config user.email "rjprajapati08@gmail.com"
                        git config user.name "ryogeshp"

                        [ -f "${MANIFEST_FILE}" ] || { echo "Error: ${MANIFEST_FILE} not found"; exit 1; }
                        echo "Manifest file found"

                        sed -i "s|image: ryogeshp/jenkins-hero:replaceImageTag|image: ryogeshp/jenkins-hero:${BUILD_NUMBER}|g" "${MANIFEST_FILE}"
                        echo "Updated image line:"
                        grep "image:" "${MANIFEST_FILE}"

                        git add "${MANIFEST_FILE}"
                        git commit -m "Update deployment image to ryogeshp/jenkins-hero:${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
